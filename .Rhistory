# theme(plot.title = element_text(hjust=0.5)) +
theme(legend.key.height=unit(1, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm")) +
theme(strip.text = element_text(size=10) ) +
theme( legend.margin = margin(5, 20, 5, 20) ) +
#theme(plot.title = element_text(size=30/nchar(plottitle), vjust=-200))+
theme(plot.title = element_text(size=13, hjust = 0.5))
return(plot)
}
## RESULTS
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeil", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilPartenaire", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilFrequence", reverse = FALSE, removeEmpty = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
wrap_strings <- function(vector_of_strings,width){sapply(vector_of_strings,FUN=function(x){paste(strwrap(x,width=width), collapse="\n")})}
AfficherGraphGenre <- function(data,columnName = "", type = "percent", reverse = TRUE, removeEmpty = FALSE) {
# Clear
if(removeEmpty)
data = data[-which(data[,c(columnName)] == ""), ]
tmp = data.frame()
# Regarder si c'est vide
tmp = xtabs(~ Genre + data[, c(columnName)], data)
tmp = as.data.frame(tmp)
names(tmp)[2] <- columnName# Fix erreur de la première column
# Remove cleared rows
if(removeEmpty)
tmp = tmp[-which(tmp$Freq == "0"), ] #clear empty things
tmpPercent = data.frame()
tmpPercent = rowPerc(xtabs(~ Genre + data[, c(columnName)], data)  )
tmpPercent = as.data.frame(tmpPercent)
names(tmpPercent)[2] <- columnName# Fix erreur de la première column
print(tmpPercent)
if(removeEmpty)
tmpPercent = tmpPercent[-which(tmpPercent$Freq == "0"), ] #clear empty things
tmpPercent = head(tmpPercent,-2) # on enleve les total
tmp = head(tmp,-2)
if(reverse) {
tmp = arrange(tmp, -row_number()) # reverse row orders to display yes and now first
tmpPercent = arrange(tmpPercent, -row_number()) # reverse row orders to display yes and now first
tmp[, c(columnName)] <- factor(tmp[, c(columnName)], levels = rev(levels(tmp[, c(columnName)])) )
tmpPercent[, c(columnName)] <- factor(tmpPercent[, c(columnName)], levels = rev(levels(tmpPercent[, c(columnName)] ))) # Reverse factors
#df_transpose = t(tmp)
}
#tmpPercent = head(tmpPercent,-4) # On eneleve les je ne sais pas
#tmp = head(tmp,-4)
mycols <- c("#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff","#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff")
textCol <- c("black", "black", "white","black","black", "black","black", "black", "white","black","black", "black")
plottitle = factor(header[1,columnName])
plottitle = str_replace(plottitle, "\n", "\n")
plottitle
plot <- ggplot(data = tmpPercent, aes(x = 2, y = Freq,   colours = wrap_strings(columnName, 6) , fill = tmpPercent[,c(columnName)] )) +
geom_bar(width = 1, stat = "identity", color ="white", position = position_fill()) +
geom_text(aes(label = wrap_strings(round(Freq), 50)), position = position_fill(vjust = 0.5), color ="black",size=4) +
coord_polar(theta = "y") +
facet_wrap(~Genre, strip.position="bottom")  +
scale_fill_manual(values = mycols) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.position='right') +
xlim(0.5, 2.5) +
labs(fill  = "", title = wrap_strings(plottitle, 50)) +
# theme(plot.title = element_text(hjust=0.5)) +
theme(legend.key.height=unit(1, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm")) +
theme(strip.text = element_text(size=10) ) +
theme( legend.margin = margin(5, 20, 5, 20) ) +
#theme(plot.title = element_text(size=30/nchar(plottitle), vjust=-200))+
theme(plot.title = element_text(size=13, hjust = 0.5))
return(plot)
}
## RESULTS
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeil", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilPartenaire", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilFrequence", reverse = FALSE, removeEmpty = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
## FONCTIONS A CHARGER
wrap_strings <- function(vector_of_strings,width){sapply(vector_of_strings,FUN=function(x){paste(strwrap(x,width=width), collapse="\n")})}
AfficherGraphGenre <- function(data,columnName = "", type = "percent", reverse = TRUE, removeEmpty = FALSE) {
# Clear
if(removeEmpty)
data = data[-which(data[,c(columnName)] == ""), ]
tmp = data.frame()
# Regarder si c'est vide
tmp = xtabs(~ Genre + data[, c(columnName)], data)
tmp = as.data.frame(tmp)
names(tmp)[2] <- columnName# Fix erreur de la première column
# Remove cleared rows
if(removeEmpty)
tmp = tmp[-which(tmp$Freq == "0"), ] #clear empty things
tmpPercent = data.frame()
tmpPercent = rowPerc(xtabs(~ Genre + data[, c(columnName)], data)  )
tmpPercent = as.data.frame(tmpPercent)
names(tmpPercent)[2] <- columnName# Fix erreur de la première column
print(tmpPercent)
if(removeEmpty)
tmpPercent = tmpPercent[-which(tmpPercent$Freq == "0"), ] #clear empty things
tmpPercent = head(tmpPercent,-2) # on enleve les total
tmp = head(tmp,-2)
if(reverse) {
tmp = arrange(tmp, -row_number()) # reverse row orders to display yes and now first
tmpPercent = arrange(tmpPercent, -row_number()) # reverse row orders to display yes and now first
tmp[, c(columnName)] <- factor(tmp[, c(columnName)], levels = rev(levels(tmp[, c(columnName)])) )
tmpPercent[, c(columnName)] <- factor(tmpPercent[, c(columnName)], levels = rev(levels(tmpPercent[, c(columnName)] ))) # Reverse factors
#df_transpose = t(tmp)
}
#tmpPercent = head(tmpPercent,-4) # On eneleve les je ne sais pas
#tmp = head(tmp,-4)
mycols <- c("#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff","#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff")
textCol <- c("black", "black", "white","black","black", "black","black", "black", "white","black","black", "black")
plottitle = factor(header[1,columnName])
plottitle = str_replace(plottitle, "\n", "\n")
plottitle
plot <- ggplot(data = tmpPercent, aes(x = 2, y = Freq,   colours = wrap_strings(columnName, 6) , fill = tmpPercent[,c(columnName)] )) +
geom_bar(width = 1, stat = "identity", color ="white", position = position_fill()) +
geom_text(aes(label = wrap_strings(round(Freq), 50)), position = position_fill(vjust = 0.5), color ="black",size=4) +
coord_polar(theta = "y") +
facet_wrap(~Genre, strip.position="bottom")  +
scale_fill_manual(values = mycols) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.position='right') +
xlim(0.5, 2.5) +
labs(fill  = "", title = wrap_strings(plottitle, 50)) +
# theme(plot.title = element_text(hjust=0.5)) +
theme(legend.key.height=unit(1, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm")) +
theme(strip.text = element_text(size=10) ) +
theme( legend.margin = margin(5, 20, 5, 20) ) +
#theme(plot.title = element_text(size=30/nchar(plottitle), vjust=-200))+
theme(plot.title = element_text(size=13, vjust = 5, hjust = 0.5))
return(plot)
}
## RESULTS
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeil", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilPartenaire", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilFrequence", reverse = FALSE, removeEmpty = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
## FONCTIONS A CHARGER
wrap_strings <- function(vector_of_strings,width){sapply(vector_of_strings,FUN=function(x){paste(strwrap(x,width=width), collapse="\n")})}
AfficherGraphGenre <- function(data,columnName = "", type = "percent", reverse = TRUE, removeEmpty = FALSE) {
# Clear
if(removeEmpty)
data = data[-which(data[,c(columnName)] == ""), ]
tmp = data.frame()
# Regarder si c'est vide
tmp = xtabs(~ Genre + data[, c(columnName)], data)
tmp = as.data.frame(tmp)
names(tmp)[2] <- columnName# Fix erreur de la première column
# Remove cleared rows
if(removeEmpty)
tmp = tmp[-which(tmp$Freq == "0"), ] #clear empty things
tmpPercent = data.frame()
tmpPercent = rowPerc(xtabs(~ Genre + data[, c(columnName)], data)  )
tmpPercent = as.data.frame(tmpPercent)
names(tmpPercent)[2] <- columnName# Fix erreur de la première column
print(tmpPercent)
if(removeEmpty)
tmpPercent = tmpPercent[-which(tmpPercent$Freq == "0"), ] #clear empty things
tmpPercent = head(tmpPercent,-2) # on enleve les total
tmp = head(tmp,-2)
if(reverse) {
tmp = arrange(tmp, -row_number()) # reverse row orders to display yes and now first
tmpPercent = arrange(tmpPercent, -row_number()) # reverse row orders to display yes and now first
tmp[, c(columnName)] <- factor(tmp[, c(columnName)], levels = rev(levels(tmp[, c(columnName)])) )
tmpPercent[, c(columnName)] <- factor(tmpPercent[, c(columnName)], levels = rev(levels(tmpPercent[, c(columnName)] ))) # Reverse factors
#df_transpose = t(tmp)
}
#tmpPercent = head(tmpPercent,-4) # On eneleve les je ne sais pas
#tmp = head(tmp,-4)
mycols <- c("#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff","#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff")
textCol <- c("black", "black", "white","black","black", "black","black", "black", "white","black","black", "black")
plottitle = factor(header[1,columnName])
plottitle = str_replace(plottitle, "\n", "\n")
plottitle
plot <- ggplot(data = tmpPercent, aes(x = 2, y = Freq,   colours = wrap_strings(columnName, 6) , fill = tmpPercent[,c(columnName)] )) +
geom_bar(width = 1, stat = "identity", color ="white", position = position_fill()) +
geom_text(aes(label = wrap_strings(round(Freq), 50)), position = position_fill(vjust = 0.5), color ="black",size=4) +
coord_polar(theta = "y") +
facet_wrap(~Genre, strip.position="bottom")  +
scale_fill_manual(values = mycols) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.position='right') +
xlim(0.5, 2.5) +
labs(fill  = "", title = wrap_strings(plottitle, 50)) +
# theme(plot.title = element_text(hjust=0.5)) +
theme(legend.key.height=unit(1, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm")) +
theme(strip.text = element_text(size=10) ) +
theme( legend.margin = margin(5, 20, 5, 20) ) +
#theme(plot.title = element_text(size=30/nchar(plottitle), vjust=-200))+
theme(plot.title = element_text(size=13, vjust = 15, hjust = 0.5))
return(plot)
}
## RESULTS
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeil", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilPartenaire", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilFrequence", reverse = FALSE, removeEmpty = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
## FONCTIONS A CHARGER
wrap_strings <- function(vector_of_strings,width){sapply(vector_of_strings,FUN=function(x){paste(strwrap(x,width=width), collapse="\n")})}
AfficherGraphGenre <- function(data,columnName = "", type = "percent", reverse = TRUE, removeEmpty = FALSE) {
# Clear
if(removeEmpty)
data = data[-which(data[,c(columnName)] == ""), ]
tmp = data.frame()
# Regarder si c'est vide
tmp = xtabs(~ Genre + data[, c(columnName)], data)
tmp = as.data.frame(tmp)
names(tmp)[2] <- columnName# Fix erreur de la première column
# Remove cleared rows
if(removeEmpty)
tmp = tmp[-which(tmp$Freq == "0"), ] #clear empty things
tmpPercent = data.frame()
tmpPercent = rowPerc(xtabs(~ Genre + data[, c(columnName)], data)  )
tmpPercent = as.data.frame(tmpPercent)
names(tmpPercent)[2] <- columnName# Fix erreur de la première column
print(tmpPercent)
if(removeEmpty)
tmpPercent = tmpPercent[-which(tmpPercent$Freq == "0"), ] #clear empty things
tmpPercent = head(tmpPercent,-2) # on enleve les total
tmp = head(tmp,-2)
if(reverse) {
tmp = arrange(tmp, -row_number()) # reverse row orders to display yes and now first
tmpPercent = arrange(tmpPercent, -row_number()) # reverse row orders to display yes and now first
tmp[, c(columnName)] <- factor(tmp[, c(columnName)], levels = rev(levels(tmp[, c(columnName)])) )
tmpPercent[, c(columnName)] <- factor(tmpPercent[, c(columnName)], levels = rev(levels(tmpPercent[, c(columnName)] ))) # Reverse factors
#df_transpose = t(tmp)
}
#tmpPercent = head(tmpPercent,-4) # On eneleve les je ne sais pas
#tmp = head(tmp,-4)
mycols <- c("#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff","#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff")
textCol <- c("black", "black", "white","black","black", "black","black", "black", "white","black","black", "black")
plottitle = factor(header[1,columnName])
plottitle = str_replace(plottitle, "\n", "\n")
plottitle
plot <- ggplot(data = tmpPercent, aes(x = 2, y = Freq,   colours = wrap_strings(columnName, 6) , fill = tmpPercent[,c(columnName)] )) +
geom_bar(width = 1, stat = "identity", color ="white", position = position_fill()) +
geom_text(aes(label = wrap_strings(round(Freq), 50)), position = position_fill(vjust = 0.5), color ="black",size=4) +
coord_polar(theta = "y") +
facet_wrap(~Genre, strip.position="bottom")  +
scale_fill_manual(values = mycols) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.position='right') +
xlim(0.5, 2.5) +
labs(fill  = "", title = wrap_strings(plottitle, 50)) +
# theme(plot.title = element_text(hjust=0.5)) +
theme(legend.key.height=unit(1, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm")) +
theme(strip.text = element_text(size=10) ) +
theme( legend.margin = margin(5, 20, 5, 20) ) +
#theme(plot.title = element_text(size=30/nchar(plottitle), vjust=-200))+
theme(plot.title = element_text(size=13, vjust = 13, hjust = 0.5))
return(plot)
}
## RESULTS
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeil", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilPartenaire", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilFrequence", reverse = FALSE, removeEmpty = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeil", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilPartenaire", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilFrequence", reverse = TRUE, removeEmpty = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
## RESULTS
AfficherGraphGenre(dataFemmesHommes, "RapportNonProtege", reverse = TRUE)
## RESULTS
AfficherGraphGenre(dataFemmesHommes, "ConsentementRespecte", reverse = TRUE)
## RESULTS
AfficherGraphGenre(dataFemmesHommes, "ConsentementRespecte", reverse = FALSE)
## RESULTS
AfficherGraphGenre(dataFemmesHommes, "ComportementPartenaireChangement", reverse = FALSE)
c2 = AfficherGraphGenre(dataFemmesHommes, "ComportementPartenaireChangement", reverse = FALSE)
c1 = AfficherGraphGenre(dataFemmesHommes, "ConsentementParlé", reverse = FALSE)
ggarrange(c1, c2, ncol = 1)
c2 = AfficherGraphGenre(dataFemmesHommes, "ComportementPartenaireChangement", reverse = FALSE, removeEmpty = TRUE)
c1 = AfficherGraphGenre(dataFemmesHommes, "ConsentementParlé", reverse = FALSE, removeEmpty = TRUE)
ggarrange(c1, c2, ncol = 1)
c2 = AfficherGraphGenre(dataFemmesHommes, "ComportementPartenaireChangement", reverse = TRUE, removeEmpty = TRUE)
c1 = AfficherGraphGenre(dataFemmesHommes, "ConsentementParlé", reverse = TRUE, removeEmpty = TRUE)
ggarrange(c1, c2, ncol = 1)
AfficherGraphGenre <- function(data,columnName = "", type = "percent", reverse = TRUE, removeEmpty = FALSE) {
# Clear
if(removeEmpty)
data = data[-which(data[,c(columnName)] == ""), ]
tmp = data.frame()
# Regarder si c'est vide
tmp = xtabs(~ Genre + data[, c(columnName)], data)
tmp = as.data.frame(tmp)
names(tmp)[2] <- columnName# Fix erreur de la première column
# Remove cleared rows
if(removeEmpty)
tmp = tmp[-which(tmp$Freq == "0"), ] #clear empty things
tmpPercent = data.frame()
tmpPercent = rowPerc(xtabs(~ Genre + data[, c(columnName)], data)  )
tmpPercent = as.data.frame(tmpPercent)
names(tmpPercent)[2] <- columnName# Fix erreur de la première column
print(tmpPercent)
if(removeEmpty)
tmpPercent = tmpPercent[-which(tmpPercent$Freq == "0"), ] #clear empty things
tmpPercent = head(tmpPercent,-2) # on enleve les total
tmp = head(tmp,-2)
if(reverse) {
tmp = arrange(tmp, -row_number()) # reverse row orders to display yes and now first
tmpPercent = arrange(tmpPercent, -row_number()) # reverse row orders to display yes and now first
tmp[, c(columnName)] <- factor(tmp[, c(columnName)], levels = rev(levels(tmp[, c(columnName)])) )
tmpPercent[, c(columnName)] <- factor(tmpPercent[, c(columnName)], levels = rev(levels(tmpPercent[, c(columnName)] ))) # Reverse factors
#df_transpose = t(tmp)
}
#tmpPercent = head(tmpPercent,-4) # On eneleve les je ne sais pas
#tmp = head(tmp,-4)
mycols <- c("#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff","#e498aaff","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff")
textCol <- c("black", "black", "white","black","black", "black","black", "black", "white","black","black", "black")
plottitle = factor(header[1,columnName])
plottitle = str_replace(plottitle, "\n", "\n")
plottitle
plot <- ggplot(data = tmpPercent, aes(x = 2, y = Freq,   colours = wrap_strings(columnName, 6) , fill = tmpPercent[,c(columnName)] )) +
geom_bar(width = 1, stat = "identity", color ="white", position = position_fill()) +
geom_text(aes(label = wrap_strings(round(Freq), 50)), position = position_fill(vjust = 0.5), color ="black",size=4) +
coord_polar(theta = "y") +
facet_wrap(~Genre, strip.position="bottom")  +
scale_fill_manual(values = mycols) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.position='right') +
xlim(0.5, 2.5) +
labs(fill  = "", title = wrap_strings(plottitle, 50)) +
# theme(plot.title = element_text(hjust=0.5)) +
theme(legend.key.height=unit(1, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm")) +
theme(strip.text = element_text(size=10) ) +
theme( legend.margin = margin(5, 20, 5, 20) ) +
#theme(plot.title = element_text(size=30/nchar(plottitle), vjust=-200))+
theme(plot.title = element_text(size=13, vjust = 13, hjust = 0.5))
return(plot)
}
## RESULTS
c2 = AfficherGraphGenre(dataFemmesHommes, "ComportementPartenaireChangement", reverse = TRUE, removeEmpty = TRUE)
c1 = AfficherGraphGenre(dataFemmesHommes, "ConsentementParlé", reverse = TRUE, removeEmpty = TRUE)
ggarrange(c1, c2, ncol = 1)
AfficherGraphGenre <- function(data,columnName = "", type = "percent", reverse = TRUE, removeEmpty = FALSE) {
# Clear
if(removeEmpty)
data = data[-which(data[,c(columnName)] == ""), ]
tmp = data.frame()
# Regarder si c'est vide
tmp = xtabs(~ Genre + data[, c(columnName)], data)
tmp = as.data.frame(tmp)
names(tmp)[2] <- columnName# Fix erreur de la première column
# Remove cleared rows
if(removeEmpty)
tmp = tmp[-which(tmp$Freq == "0"), ] #clear empty things
tmpPercent = data.frame()
tmpPercent = rowPerc(xtabs(~ Genre + data[, c(columnName)], data)  )
tmpPercent = as.data.frame(tmpPercent)
names(tmpPercent)[2] <- columnName# Fix erreur de la première column
print(tmpPercent)
if(removeEmpty)
tmpPercent = tmpPercent[-which(tmpPercent$Freq == "0"), ] #clear empty things
tmpPercent = head(tmpPercent,-2) # on enleve les total
tmp = head(tmp,-2)
if(reverse) {
tmp = arrange(tmp, -row_number()) # reverse row orders to display yes and now first
tmpPercent = arrange(tmpPercent, -row_number()) # reverse row orders to display yes and now first
tmp[, c(columnName)] <- factor(tmp[, c(columnName)], levels = rev(levels(tmp[, c(columnName)])) )
tmpPercent[, c(columnName)] <- factor(tmpPercent[, c(columnName)], levels = rev(levels(tmpPercent[, c(columnName)] ))) # Reverse factors
#df_transpose = t(tmp)
}
#tmpPercent = head(tmpPercent,-4) # On eneleve les je ne sais pas
#tmp = head(tmp,-4)
mycols <- c("#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff","#dd5877ff","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff")
textCol <- c("black", "black", "white","black","black", "black","black", "black", "white","black","black", "black")
plottitle = factor(header[1,columnName])
plottitle = str_replace(plottitle, "\n", "\n")
plottitle
plot <- ggplot(data = tmpPercent, aes(x = 2, y = Freq,   colours = wrap_strings(columnName, 6) , fill = tmpPercent[,c(columnName)] )) +
geom_bar(width = 1, stat = "identity", color ="white", position = position_fill()) +
geom_text(aes(label = wrap_strings(round(Freq), 50)), position = position_fill(vjust = 0.5), color ="black",size=4) +
coord_polar(theta = "y") +
facet_wrap(~Genre, strip.position="bottom")  +
scale_fill_manual(values = mycols) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.position='right') +
xlim(0.5, 2.5) +
labs(fill  = "", title = wrap_strings(plottitle, 50)) +
# theme(plot.title = element_text(hjust=0.5)) +
theme(legend.key.height=unit(1, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm")) +
theme(strip.text = element_text(size=10) ) +
theme( legend.margin = margin(5, 20, 5, 20) ) +
#theme(plot.title = element_text(size=30/nchar(plottitle), vjust=-200))+
theme(plot.title = element_text(size=13, vjust = 13, hjust = 0.5))
return(plot)
}
## RESULTS
c2 = AfficherGraphGenre(dataFemmesHommes, "ComportementPartenaireChangement", reverse = TRUE, removeEmpty = TRUE)
c1 = AfficherGraphGenre(dataFemmesHommes, "ConsentementParlé", reverse = TRUE, removeEmpty = TRUE)
ggarrange(c1, c2, ncol = 1)
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeil", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilPartenaire", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationSommeilFrequence", reverse = TRUE, removeEmpty = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
## RESULTS
c2 = AfficherGraphGenre(dataFemmesHommes, "ComportementPartenaireChangement", reverse = TRUE, removeEmpty = TRUE)
c1 = AfficherGraphGenre(dataFemmesHommes, "ConsentementParlé", reverse = TRUE, removeEmpty = TRUE)
ggarrange(c1, c2, ncol = 1)
AfficherGraphGenre <- function(data,columnName = "", type = "percent", reverse = TRUE, removeEmpty = FALSE) {
# Clear
if(removeEmpty)
data = data[-which(data[,c(columnName)] == ""), ]
tmp = data.frame()
# Regarder si c'est vide
tmp = xtabs(~ Genre + data[, c(columnName)], data)
tmp = as.data.frame(tmp)
names(tmp)[2] <- columnName# Fix erreur de la première column
# Remove cleared rows
if(removeEmpty)
tmp = tmp[-which(tmp$Freq == "0"), ] #clear empty things
tmpPercent = data.frame()
tmpPercent = rowPerc(xtabs(~ Genre + data[, c(columnName)], data)  )
tmpPercent = as.data.frame(tmpPercent)
names(tmpPercent)[2] <- columnName# Fix erreur de la première column
print(tmpPercent)
if(removeEmpty)
tmpPercent = tmpPercent[-which(tmpPercent$Freq == "0"), ] #clear empty things
tmpPercent = head(tmpPercent,-2) # on enleve les total
tmp = head(tmp,-2)
if(reverse) {
tmp = arrange(tmp, -row_number()) # reverse row orders to display yes and now first
tmpPercent = arrange(tmpPercent, -row_number()) # reverse row orders to display yes and now first
tmp[, c(columnName)] <- factor(tmp[, c(columnName)], levels = rev(levels(tmp[, c(columnName)])) )
tmpPercent[, c(columnName)] <- factor(tmpPercent[, c(columnName)], levels = rev(levels(tmpPercent[, c(columnName)] ))) # Reverse factors
#df_transpose = t(tmp)
}
#tmpPercent = head(tmpPercent,-4) # On eneleve les je ne sais pas
#tmp = head(tmp,-4)
mycols <- c("#a132b8FF","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff","#b3d6a2ff","#d9aee2ff", "#f3e4f6FF","#f4a5c1ff" , "#f3c2b4ff", "#f0f1f2ff")
textCol <- c("black", "black", "white","black","black", "black","black", "black", "white","black","black", "black")
plottitle = factor(header[1,columnName])
plottitle = str_replace(plottitle, "\n", "\n")
plottitle
plot <- ggplot(data = tmpPercent, aes(x = 2, y = Freq,   colours = wrap_strings(columnName, 6) , fill = tmpPercent[,c(columnName)] )) +
geom_bar(width = 1, stat = "identity", color ="white", position = position_fill()) +
geom_text(aes(label = wrap_strings(round(Freq), 50)), position = position_fill(vjust = 0.5), color ="black",size=4) +
coord_polar(theta = "y") +
facet_wrap(~Genre, strip.position="bottom")  +
scale_fill_manual(values = mycols) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
theme(legend.position='right') +
xlim(0.5, 2.5) +
labs(fill  = "", title = wrap_strings(plottitle, 50)) +
# theme(plot.title = element_text(hjust=0.5)) +
theme(legend.key.height=unit(1, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(plot.margin=unit(c(1,1,1.5,1.2),"cm")) +
theme(strip.text = element_text(size=10) ) +
theme( legend.margin = margin(5, 20, 5, 20) ) +
#theme(plot.title = element_text(size=30/nchar(plottitle), vjust=-200))+
theme(plot.title = element_text(size=13, vjust = 13, hjust = 0.5))
return(plot)
}
## RESULTS
c2 = AfficherGraphGenre(dataFemmesHommes, "ComportementPartenaireChangement", reverse = TRUE, removeEmpty = TRUE)
c1 = AfficherGraphGenre(dataFemmesHommes, "ConsentementParlé", reverse = TRUE, removeEmpty = TRUE)
ggarrange(c1, c2, ncol = 1)
AfficherGraphGenre(dataFemmesHommes, "SexeViolenceInitie", reverse = TRUE, removeEmpty = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeViolenceInitie", reverse = TRUE, removeEmpty = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeViolenceInitie", reverse = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeViolenceInitie", reverse = FALSE)
AfficherGraphGenre(dataFemmesHommes, "SexeViolenceInitie", reverse = FALSE)
AfficherGraphGenre(dataFemmesHommes, "SexeViolenceInitie", reverse = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeDemandeArretContinu", reverse = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeDemandeArretContinu", reverse = TRUE,removeEmpty = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeFaitAccompliExemple", reverse = TRUE,removeEmpty = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeFaitAccompliExemple", reverse = TRUE,removeEmpty = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeFaitAccompliExemple", reverse = TRUE,removeEmpty = TRUE)
AfficherGraphGenre(dataFemmesHommes, "ConsentementEcole", reverse = TRUE,removeEmpty = TRUE)
AfficherGraphGenre(dataFemmesHommes, "ConsentementEcole", reverse = TRUE,removeEmpty = TRUE)
AfficherGraphGenre(dataFemmesHommes, "ConsentementEcole", reverse = TRUE)
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeInsiste", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeInsisteFrequence", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeInsisteEvenement", reverse = TRUE, removeEmpty = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
p1 = AfficherGraphGenre(dataFemmesHommes, "SexeInsiste", reverse = TRUE)
p2 = AfficherGraphGenre(dataFemmesHommes, "SexeInsisteFrequence", reverse = FALSE, removeEmpty = TRUE)
p3 = AfficherGraphGenre(dataFemmesHommes, "SexeInsisteEvenement", reverse = TRUE)
ggarrange(p1, p2,p3, ncol = 1)
ggarrange(p1, p2, ncol = 1)
p1
AfficherGraphGenre(dataFemmesHommes, "SexePasEnvie", reverse = TRUE)
AfficherGraphGenre(dataFemmesHommes, "PressionFrequence", reverse = TRUE)
SexePasEnvie
AfficherGraphGenre(dataFemmesHommes, "SexePasEnvie", reverse = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeNonpossession", reverse = TRUE)
AfficherGraphGenre(dataFemmesHommes, "SexeHorsPenetrationEveille", reverse = TRUE)
